designpower <-list()
for(samplesize in seq(126, 1260, by = 126)) {
optdesign <- gen_design(candidateset = factorial, model = ~(Uplink_Terminal+Downlink_Terminal+Test_Network)^2, trials = samplesize)
designpower[[counter]] <- eval_design(design = optdesign, alpha = 0.2, effectsize = 0.402, detailedoutput = TRUE, parallel = TRUE)
counter <- counter + 1
}
designpower[[length(designpower)]]
joined <- do.call(rbind, designpower)
filtered <- dplyr::filter(joined, type == "effect.power")
ggplot(filtered) +
geom_line(aes(x = trials, y = power, color = parameter), size = 1) +
scale_y_continuous(limits = c(0, 1), breaks = seq(0, 1, 0.2)) +
scale_x_continuous(breaks = seq(126, 1260, 126))
factorial2 = expand.grid(Rx_Type = as.factor(c("Handheld", "Airborne", "Site")), Weather = as.factor(c("Clear", "Cloudy", "Precipitation", "Snow")), Battery_Life = c(80, 100), Altitude = as.factor(c("High", "Medium", "Low")))
factorial2 = subset(factorial2,
!(Rx_Type %in% c("Handheld") & Altitude %in% c("High")) &
!(Rx_Type %in% c("Airborne") & Weather %in% c("Snow")))
factorial2
d_optdesign = gen_design(candidateset = factorial2, model = ~ Rx_Type + Weather + Battery_Life + Altitude, trials = 100, optimality = "D", parallel  = TRUE)
get_optimality(d_optdesign)
eval_design(design = d_optdesign, alpha = 0.2, effectsize = .5, detailedoutput = TRUE, conservative = TRUE)
d_optdesign = gen_design(candidateset = factorial2, model = ~ Rx_Type + Weather + Battery_Life + Altitude, trials = 25, optimality = "D", parallel  = TRUE)
get_optimality(d_optdesign)
eval_design(design = d_optdesign, alpha = 0.2, effectsize = .5, detailedoutput = TRUE, conservative = TRUE)
d_optdesign = gen_design(candidateset = factorial2, model = ~ (Rx_Type + Weather + Battery_Life + Altitude)^2, trials = 25, optimality = "D", parallel  = TRUE)
d_optdesign = gen_design(candidateset = factorial2, model = ~ (Rx_Type + Weather + Battery_Life + Altitude + Rx_Type:Battery_Life + Weather:Battery_Life + Weather:Altitude + Battery_Life:Altitude), trials = 25, optimality = "D", parallel  = TRUE)
get_optimality(d_optdesign)
eval_design(design = d_optdesign, alpha = 0.2, effectsize = .5, detailedoutput = TRUE, conservative = TRUE)
d_optdesign
d_optdesign = gen_design(candidateset = factorial2, model = ~ (Rx_Type + Weather + Battery_Life + Altitude + Rx_Type:Battery_Life + Weather:Battery_Life + Weather:Altitude + Battery_Life:Altitude), trials = 24, optimality = "D", parallel  = TRUE)
get_optimality(d_optdesign)
d_optdesign = gen_design(candidateset = factorial2, model = ~ (Rx_Type + Weather + Battery_Life + Altitude + Rx_Type:Battery_Life + Weather:Battery_Life + Weather:Altitude + Battery_Life:Altitude), trials = 24, optimality = "D", parallel  = TRUE)
d_optdesign
eval_design(design = d_optdesign, alpha = 0.2, effectsize = .5, detailedoutput = TRUE, conservative = TRUE)
factorial2 = expand.grid(Rx_Type = as.factor(c("Handheld", "Airborne", "Site")), Weather = as.factor(c("Clear", "Cloudy", "Precipitation", "Snow")), Battery_Life = c(80, 100), Altitude = as.factor(c("High", "Medium", "Low")))
factorial2 = subset(factorial2,
!(Rx_Type %in% c("Handheld") & Altitude %in% c("High")) &
!(Rx_Type %in% c("Airborne") & Weather %in% c("Snow")))
factorial2
d_optdesign = gen_design(candidateset = factorial2, model = ~ (Rx_Type + Weather + Battery_Life + Altitude + Rx_Type:Battery_Life + Weather:Battery_Life + Weather:Altitude + Battery_Life:Altitude), trials = 24, optimality = "D", parallel  = TRUE)
d_optdesign
get_optimality(d_optdesign)
eval_design(design = d_optdesign, alpha = 0.2, effectsize = .5, detailedoutput = TRUE, conservative = TRUE)
counter <-1
designpower <-list()
for(samplesize in seq(48, 240, by = 24)) {
d_optdesign <- gen_design(candidateset = factorial2, model = ~ (Rx_Type + Weather + Battery_Life + Altitude + Rx_Type:Battery_Life + Weather:Battery_Life + Weather:Altitude + Battery_Life:Altitude), trials = samplesize, optimality = "D", parallel  = TRUE)
designpower[[counter]] <- eval_design(design = d_optdesign, alpha = 0.2, effectsize = .5, detailedoutput = TRUE, conservative = TRUE)
counter <- counter + 1
}
design
counter <-1
designpower <-list()
for(samplesize in seq(48, 240, by = 24)) {
d_optdesign <- gen_design(candidateset = factorial2, model = ~ (Rx_Type + Weather + Battery_Life + Altitude + Rx_Type:Battery_Life + Weather:Battery_Life + Weather:Altitude + Battery_Life:Altitude), trials = samplesize, optimality = "D", parallel  = TRUE)
designpower[[counter]] <- eval_design(design = d_optdesign, alpha = 0.2, effectsize = .5, detailedoutput = TRUE, conservative = TRUE)
counter <- counter + 1
}
designpower[[length(designpower)]]
joined <- do.call(rbind, designpower)
filtered <- dplyr::filter(joined, type == "effect.power")
ggplot(filtered) +
geom_line(aes(x = trials, y = power, color = parameter), size = 1) +
scale_y_continuous(limits = c(0, 1), breaks = seq(0, 1, 0.2)) +
scale_x_continuous(breaks = seq(48, 240, 24))
library(skpr)
library(mbest)
library(ggplot2)
joined <- do.call(rbind, designpower)
filtered <- dplyr::filter(joined, type == "effect.power")
ggplot(filtered) +
geom_line(aes(x = trials, y = power, color = parameter), size = 1) +
scale_y_continuous(limits = c(0, 1), breaks = seq(0, 1, 0.2)) +
scale_x_continuous(breaks = seq(48, 240, 24))
counter <-1
designpower <-list()
for(samplesize in seq(240, 480, by = 24)) {
d_optdesign <- gen_design(candidateset = factorial2, model = ~ (Rx_Type + Weather + Battery_Life + Altitude + Rx_Type:Battery_Life + Weather:Battery_Life + Weather:Altitude + Battery_Life:Altitude), trials = samplesize, optimality = "D", parallel  = TRUE)
designpower[[counter]] <- eval_design(design = d_optdesign, alpha = 0.2, effectsize = .5, detailedoutput = TRUE, conservative = TRUE)
counter <- counter + 1
}
designpower[[length(designpower)]]
joined <- do.call(rbind, designpower)
filtered <- dplyr::filter(joined, type == "effect.power")
ggplot(filtered) +
geom_line(aes(x = trials, y = power, color = parameter), size = 1) +
scale_y_continuous(limits = c(0, 1), breaks = seq(0, 1, 0.2)) +
scale_x_continuous(breaks = seq(240, 480, 24))
library(skpr)
library(mbest)
library(AlgDesign)
library(ggplot2)
library(car)
library(dplyr)
library(rstatix)
factorial = expand.grid(Uplink_Terminal = as.factor(c("UT1", "UT2", "UT3")), Downlink_Terminal = as.factor(c("DT1", "DT2", "DT3", "DT4", "DT5", "DT6", "DT7", "DT8", "DT9")), Test_Network = as.factor(c("TN1", "TN2", "TN3", "TN4", "TN5", "TN6", "TN7")))
optdesign = gen_design(candidateset = factorial, model = ~(Uplink_Terminal+Downlink_Terminal+Test_Network)^2, trials=189)
eval_design(design = optdesign, alpha = .20, effectsize = .503, detailedoutput = TRUE)
eval_design(design = optdesign, alpha = .20, effectsize = .503, detailedoutput = TRUE, conservative = TRUE)
counter <-1
designpower <-list()
for(samplesize in seq(2079, 3969, by = 189)) {
optdesign <- gen_design(candidateset = factorial, model = ~(Uplink_Terminal+Downlink_Terminal+Test_Network)^2, trials = samplesize)
designpower[[counter]] <- eval_design(design = optdesign, alpha = 0.2, effectsize = 0.503, detailedoutput = TRUE, parallel = TRUE)
counter <- counter + 1
}
designpower[[length(designpower)]]
counter <-1
designpower <-list()
for(samplesize in seq(2079, 3969, by = 189)) {
optdesign <- gen_design(candidateset = factorial, model = ~(Uplink_Terminal+Downlink_Terminal+Test_Network)^2, trials = samplesize)
designpower[[counter]] <- eval_design(design = optdesign, alpha = 0.2, effectsize = 0.503, detailedoutput = TRUE, parallel = TRUE, conservative = TRUE)
counter <- counter + 1
}
designpower[[length(designpower)]]
joined <- do.call(rbind, designpower)
filtered <- dplyr::filter(joined, type == "effect.power")
ggplot(filtered) +
geom_line(aes(x = trials, y = power, color = parameter), size = 1) +
scale_y_continuous(limits = c(0, 1), breaks = seq(0, 1, 0.2)) +
scale_x_continuous(breaks = seq(2079, 3969, by = 189))
counter <-1
designpower <-list()
for(samplesize in seq(2079, 3969, by = 189)) {
optdesign3 <- gen_design(candidateset = factorial, model = ~ (Uplink_Terminal+Downlink_Terminal+Test_Network)^2, trials = samplesize)
designpower[[counter]] <- eval_design_mc(optdesign3, alpha = 0.2, glmfamily = "binomial", effectsize = c(.94, .99), nsim = 1000, calceffect = TRUE, detailedoutput = TRUE, parallel = TRUE)
counter <- counter + 1
}
designpower[[length(designpower)]]
optdesign = gen_design(candidateset = factorial, model = ~(Uplink_Terminal+Downlink_Terminal+Test_Network)^2, trials=189)
counter <-1
designpower <-list()
for(samplesize in seq(189, 2079, by = 189)) {
optdesign <- gen_design(candidateset = factorial, model = ~(Uplink_Terminal+Downlink_Terminal+Test_Network)^2, trials = samplesize)
designpower[[counter]] <- eval_design(design = optdesign, alpha = 0.2, effectsize = 0.503, detailedoutput = TRUE, parallel = TRUE)
counter <- counter + 1
}
designpower[[length(designpower)]]
library(skpr)
library(mbest)
library(AlgDesign)
library(ggplot2)
library(car)
library(dplyr)
library(rstatix)
library(skpr)
library(mbest)
library(AlgDesign)
library(ggplot2)
library(car)
library(dplyr)
library(rstatix)
factorial = expand.grid(Uplink_Terminal = as.factor(c("UT1", "UT2", "UT3", "UT4", "UT5", "UT6", "UT7", "UT8", "UT9")), Downlink_Terminal = as.factor(c("DT1", "DT2", "DT3", "DT4", "DT5", "DT6", "DT7", "DT8", "DT9")), Test_Network = as.factor(c("TN1", "TN2", "TN3", "TN4", "TN5", "TN6", "TN7")), Message_Type = as.factor(c("A", "B")))
factorial
factorial = subset(factorial,
!(Uplink_Terminal %in% c("UT4") & Message_Type %in% c("A")) &
!(Uplink_Terminal %in% c("UT5") & Message_Type %in% c("A")) &
!(Uplink_Terminal %in% c("UT6") & Message_Type %in% c("A")) &
!(Uplink_Terminal %in% c("UT7") & Message_Type %in% c("A")) &
!(Uplink_Terminal %in% c("UT8") & Message_Type %in% c("A")) &
!(Uplink_Terminal %in% c("UT9") & Message_Type %in% c("A")))
optdesign = gen_design(candidateset = factorial, model = ~(Uplink_Terminal+Downlink_Terminal+Test_Network+Message_Type+Uplink_Terminal:Downlink_Terminal+Uplink_Terminal:Test_Network+Uplink_Terminal:Test_Network+Downlink_Terminal:Test_Network+Downlink_Terminal:Message_Type+Test_Network:Message_Type), trials=243)
get_optimality(optdesign)
optdesign = gen_design(candidateset = factorial, model = ~(Uplink_Terminal+Downlink_Terminal+Test_Network+Message_Type+Uplink_Terminal:Downlink_Terminal+Uplink_Terminal:Test_Network+Uplink_Terminal:Test_Network+Downlink_Terminal:Test_Network+Downlink_Terminal:Message_Type+Test_Network:Message_Type), trials=243, repeats = 100)
optdesign = gen_design(candidateset = factorial, model = ~(Uplink_Terminal+Downlink_Terminal+Test_Network+Message_Type+Uplink_Terminal:Downlink_Terminal+Uplink_Terminal:Test_Network+Uplink_Terminal:Test_Network+Downlink_Terminal:Test_Network+Downlink_Terminal:Message_Type+Test_Network:Message_Type), trials=243, repeats = 100, parallel = TRUE)
get_optimality(optdesign)
eval_design(design = optdesign, alpha = .20, effectsize = 1.333, detailedoutput = TRUE, conservative = TRUE)
a = eval_design(design = optdesign, alpha = .20, effectsize = 1.333, detailedoutput = TRUE, conservative = TRUE)
factorial2 = expand.grid(Uplink_Terminal = as.factor(c("UT1", "UT2", "UT3", "UT4", "UT5", "UT6", "UT7", "UT8", "UT9")), Downlink_Terminal = as.factor(c("DT1", "DT2", "DT3", "DT4", "DT5", "DT6", "DT7", "DT8", "DT9")), Test_Network = as.factor(c("TN1", "TN2", "TN3", "TN4", "TN5", "TN6", "TN7")), Message_Type = as.factor(c("A", "B")))
optdesign = gen_design(candidateset = factorial, model = ~(Uplink_Terminal+Downlink_Terminal+Test_Network+Message_Type+Uplink_Terminal:Downlink_Terminal+Uplink_Terminal:Test_Network+Downlink_Terminal:Test_Network+Downlink_Terminal:Message_Type+Test_Network:Message_Type), trials=243, repeats = 100, parallel = TRUE)
get_optimality(optdesign)
get_optimality(optdesign)
optdesign = gen_design(candidateset = factorial, model = ~(Uplink_Terminal+Downlink_Terminal+Test_Network+Message_Type+Uplink_Terminal:Downlink_Terminal+Uplink_Terminal:Test_Network+Downlink_Terminal:Test_Network+Downlink_Terminal:Message_Type+Test_Network:Message_Type), trials=243, repeats = 100, parallel = TRUE, optimality = "ALIAS")
optdesign = gen_design(candidateset = factorial, model = ~(Uplink_Terminal+Downlink_Terminal+Test_Network+Message_Type+Uplink_Terminal:Downlink_Terminal+Uplink_Terminal:Test_Network+Downlink_Terminal:Test_Network+Downlink_Terminal:Message_Type+Test_Network:Message_Type), trials=243, repeats = 100, parallel = TRUE, optimality = "A")
library(skpr)
library(mbest)
library(AlgDesign)
library(ggplot2)
library(car)
library(dplyr)
library(rstatix)
library(skpr)
library(mbest)
library(AlgDesign)
library(ggplot2)
library(car)
library(dplyr)
library(rstatix)
optdesign = gen_design(candidateset = factorial, model = ~(Uplink_Terminal+Downlink_Terminal+Test_Network+Message_Type+Uplink_Terminal:Downlink_Terminal+Uplink_Terminal:Test_Network+Downlink_Terminal:Test_Network+Downlink_Terminal:Message_Type+Test_Network:Message_Type), trials=243, repeats = 100, parallel = TRUE, optimality = "A")
get_optimality(optdesign)
optdesign = gen_design(candidateset = factorial, model = ~(Uplink_Terminal+Downlink_Terminal+Test_Network+Message_Type+Uplink_Terminal:Downlink_Terminal+Uplink_Terminal:Test_Network+Downlink_Terminal:Test_Network+Downlink_Terminal:Message_Type+Test_Network:Message_Type), trials=243, repeats = 100, parallel = TRUE, optimality = "ALIAS", minDopt = "0.8")
optdesign = gen_design(candidateset = factorial, model = ~(Uplink_Terminal+Downlink_Terminal+Test_Network+Message_Type+Uplink_Terminal:Downlink_Terminal+Uplink_Terminal:Test_Network+Downlink_Terminal:Test_Network+Downlink_Terminal:Message_Type+Test_Network:Message_Type), trials=243, repeats = 100, parallel = TRUE, optimality = "D", minDopt = "0.8")
optdesign = gen_design(candidateset = factorial, model = ~(Uplink_Terminal+Downlink_Terminal+Test_Network+Message_Type+Uplink_Terminal:Downlink_Terminal+Uplink_Terminal:Test_Network+Downlink_Terminal:Test_Network+Downlink_Terminal:Message_Type+Test_Network:Message_Type), trials=1215, repeats = 100, parallel = TRUE, optimality = "D")
get_optimality(optdesign)
View(optdesign)
optdesign = gen_design(candidateset = factorial, model = ~(Uplink_Terminal+Downlink_Terminal+Test_Network+Message_Type+Uplink_Terminal:Downlink_Terminal+Uplink_Terminal:Test_Network+Downlink_Terminal:Test_Network+Downlink_Terminal:Message_Type+Test_Network:Message_Type), trials=1215, repeats = 100, parallel = TRUE, optimality = "A")
optdesign = gen_design(candidateset = factorial, model = ~(Uplink_Terminal+Downlink_Terminal+Test_Network+Message_Type+Uplink_Terminal:Downlink_Terminal+Uplink_Terminal:Test_Network+Downlink_Terminal:Test_Network+Downlink_Terminal:Message_Type+Test_Network:Message_Type), trials=1215, repeats = 100, parallel = TRUE, optimality = "A")
get_optimality(optdesign)
get_optimality(optdesign)
optdesign = gen_design(candidateset = factorial, model = ~(Uplink_Terminal+Downlink_Terminal+Test_Network+Message_Type+Uplink_Terminal:Downlink_Terminal+Uplink_Terminal:Test_Network+Downlink_Terminal:Test_Network+Downlink_Terminal:Message_Type+Test_Network:Message_Type), trials=1215, repeats = 100, parallel = TRUE)
get_optimality(optdesign)
write.csv(optdesign,"‪C:\\User\\anton\\Desktop\optdesign.csv", row.names = FALSE)
write.csv(optdesign,"‪C:\\User\\anton\\Desktop\\optdesign.csv", row.names = FALSE)
write.csv(optdesign,"‪C:\\Users\\anton\\Desktop\\optdesign.csv", row.names = FALSE)
write.csv(optdesign, "C:\\Users\\anton\\Documents\\optdesign.csv", row.names = FALSE)
eval_design(design = optdesign, alpha = 0.2, effectsize = 1.333, detailedoutput = TRUE, conservative = TRUE)
dopt_eval = eval_design(design = optdesign, alpha = 0.2, effectsize = 1.333, detailedoutput = TRUE, conservative = TRUE)
dopt_eval
get_optimality(dopt_eval)
plot_correlations(dopt_eval)
plot_correlations(d_optdesign)
plot_correlations(optdesign)
plot_fds(optdesign)
get_optimality(optdesign)
plot_correlations(optdesign, pow = 1)
plot_correlations(optdesign, pow = 3)
library(skpr)
library(AlgDesign)
library(mbest)
library(ggplot2)
library(car)
factorial = expand.grid(Lion = as.factor(c("L1", "L2", "L3", "L4", "L5", "L6", "L7", "L8", "L9")), Bear = as.factor(c("B1", "B2", "B3", "B4", "B5", "B6", "B7", "B8", "B9")), Tiger = as.factor(c("T1", "T2", "T3", "T4", "T5", "T6", "T7")), Monkey = as.factor(c("M1", "M2")))
factorial = subset(factorial,
!(Lion %in% c("L4") & Monkey %in% c("M1")) &
!(Lion %in% c("L5") & Monkey %in% c("M1")) &
!(Lion %in% c("L6") & Monkey %in% c("M1")) &
!(Lion %in% c("L7") & Monkey %in% c("M1")) &
!(Lion %in% c("L8") & Monkey %in% c("M1")) &
!(Lion %in% c("L9") & Monkey %in% c("M1")))
optdesign = gen_design(candidateset = factorial, model = ~(Lion + Bear + Tiger + Monkey + Lion:Bear + Lion:Tiger +Bear:Tiger + Bear:Monkey + Tiger:Monkey), trials=1215, repeats = 100, parallel = TRUE)
get_optimality(optdesign)
power.t.test(d = .05, sig.level = .2, power = 0.8, type = "one.sample", alternative = "less")
power.t.test(d = .05, sig.level = .2, power = 0.8, type = "one.sided", alternative = "less")
power.t.test(d = .05, sig.level = .2, power = 0.8, type = "one.sample", alternative = "less")
power.t.test(d = .05, sig.level = .2, power = 0.8, type = "one.sample", alternative = "one.sided")
power.t.test(d = -.05, sig.level = .2, power = 0.8, type = "one.sample", alternative = "one.sided")
power.t.test(d = .05, sig.level = .2, power = 0.8, type = "one.sample", alternative = "one.sided")
power.t.test(d = .5, sig.level = .2, power = 0.8, type = "one.sample", alternative = "one.sided")
power.t.test(d = 1, sig.level = .2, power = 0.8, type = "one.sample", alternative = "one.sided")
power.t.test(d = 1.333, sig.level = .2, power = 0.8, type = "one.sample", alternative = "one.sided")
power.t.test(d = .05, sig.level = .2, power = 0.8, type = "one.sample", alternative = "one.sided")
power.t.test(d = .1, sig.level = .2, power = 0.8, type = "one.sample", alternative = "one.sided")
power.t.test(d = .5, sig.level = .2, power = 0.8, type = "one.sample", alternative = "one.sided")
library(skpr)
library(mbest)
library(ggplot2)
library(pwr)
install.packages("skpr")
install.packages("mbest")
install.packages("ggplot2")
install.packages("pwr")
install.packages("tidyverse")
install.packages("readr")
install.packages("skpr")
install.packages("mbest")
install.packages("ggplot2")
install.packages("pwr")
install.packages("skpr")
install.packages("mbest")
install.packages("ggplot2")
install.packages("pwr")
install.packages("tidyverse")
install.packages("readr")
install.packages("Rtools")
install.packages("skpr")
install.packages("mbest")
install.packages("ggplot2")
install.packages("pwr")
install.packages("tidyverse")
install.packages("readr")
library(skpr)
library(mbest)
library(ggplot2)
library(pwr)
library(tidyverse)
library(readr)
remotes::install_github("tylermorganwall/skpr@effect_custom")
install.packages("remotes")
install.packages("Rtools")
remotes::install_github("tylermorganwall/skpr@effect_custom")
update.packages()
update.packages(ask = FALSE)
set.seed(4)
factorial = expand.grid(Rx_Type = as.factor(c("Handheld", "Airborne", "Fixed_Site")), Weather = as.factor(c("Clear", "Cloudy", "Precipitation", "Snow")), Battery_Life = c(50, 80, 100))
factorial
optdesign = gen_design(candidateset = factorial, model = ~ (Rx_Type + Weather + Battery_Life)^2, trials = 36)
eval_design(design = optdesign, alpha = 0.2, effectsize = 0.7143, detailedoutput = TRUE, conservative = TRUE)
counter <-1
designpower <-list()
for(samplesize in seq(72, 396, by = 36)) {
optdesign <- gen_design(candidateset = factorial, model = ~ (Rx_Type + Weather + Battery_Life)^2, trials = samplesize)
designpower[[counter]] <- eval_design(design = optdesign, alpha = 0.2, effectsize = 0.7143, detailedoutput = TRUE, conservative = TRUE)
counter <- counter + 1
}
designpower[[length(designpower)]]
joined <- do.call(rbind, designpower)
filtered <- dplyr::filter(joined, type == "effect.power")
ggplot(filtered) + ggtitle("Power vs. Sample Size")+
theme(text = element_text(size = 20))+
labs(title = "COI 1 - Op 1")+
labs(subtitle = "Power vs. Sample Size")+
geom_line(aes(x = trials, y = power, color = parameter), size = 1) +
scale_y_continuous(limits = c(0, 1), breaks = seq(0, 1, 0.2)) +
scale_x_continuous(breaks = seq(72, 396, 36))
joined <- do.call(rbind, designpower)
filtered <- dplyr::filter(joined, type == "effect.power")
ggplot(filtered) + ggtitle("Power vs. Sample Size")+
theme(text = element_text(size = 16))+
labs(title = "COI 1 - Op 1")+
labs(subtitle = "Power vs. Sample Size")+
geom_line(aes(x = trials, y = power, color = parameter), size = 1) +
scale_y_continuous(limits = c(0, 1), breaks = seq(0, 1, 0.2)) +
scale_x_continuous(breaks = seq(72, 396, 36))
joined <- do.call(rbind, designpower)
filtered <- dplyr::filter(joined, type == "effect.power")
ggplot(filtered) + ggtitle("Power vs. Sample Size")+
theme(text = element_text(size = 16))+
labs(title = "COI 1 - Op 1")+
labs(subtitle = "Power vs. Sample Size")+
geom_line(aes(x = trials, y = power, color = parameter), size = 1, alpha = .15) +
scale_y_continuous(limits = c(0, 1), breaks = seq(0, 1, 0.2)) +
scale_x_continuous(breaks = seq(72, 396, 36))
joined <- do.call(rbind, designpower)
filtered <- dplyr::filter(joined, type == "effect.power")
ggplot(filtered) + ggtitle("Power vs. Sample Size")+
theme(text = element_text(size = 16))+
labs(title = "COI 1 - Op 1")+
labs(subtitle = "Power vs. Sample Size")+
geom_line(aes(x = trials, y = power, color = parameter), size = 1) +
scale_y_continuous(limits = c(0, 1), breaks = seq(0, 1, 0.2)) +
scale_x_continuous(breaks = seq(72, 396, 36))
joined <- do.call(rbind, designpower)
filtered <- dplyr::filter(joined, type == "effect.power")
ggplot(filtered) + ggtitle("Power vs. Sample Size")+
theme(text = element_text(size = 16))+
labs(title = "COI 1 - Op 1")+
labs(subtitle = "Power vs. Sample Size")+
geom_line(aes(x = trials, y = power, color = parameter), size = 1, alpha = .5) +
scale_y_continuous(limits = c(0, 1), breaks = seq(0, 1, 0.2)) +
scale_x_continuous(breaks = seq(72, 396, 36))
joined <- do.call(rbind, designpower)
filtered <- dplyr::filter(joined, type == "effect.power")
ggplot(filtered) + ggtitle("Power vs. Sample Size")+
theme(text = element_text(size = 16))+
labs(title = "COI 1 - Op 1")+
labs(subtitle = "Power vs. Sample Size")+
geom_line(aes(x = trials, y = power, color = parameter), size = 1, alpha = .1) +
scale_y_continuous(limits = c(0, 1), breaks = seq(0, 1, 0.2)) +
scale_x_continuous(breaks = seq(72, 396, 36))
joined <- do.call(rbind, designpower)
filtered <- dplyr::filter(joined, type == "effect.power")
ggplot(filtered) + ggtitle("Power vs. Sample Size")+
theme(text = element_text(size = 16))+
labs(title = "COI 1 - Op 1")+
labs(subtitle = "Power vs. Sample Size")+
geom_line(aes(x = trials, y = power, color = parameter), size = 1, position = "stack") +
scale_y_continuous(limits = c(0, 1), breaks = seq(0, 1, 0.2)) +
scale_x_continuous(breaks = seq(72, 396, 36))
joined <- do.call(rbind, designpower)
filtered <- dplyr::filter(joined, type == "effect.power")
ggplot(filtered) + ggtitle("Power vs. Sample Size")+
theme(text = element_text(size = 16))+
labs(title = "COI 1 - Op 1")+
labs(subtitle = "Power vs. Sample Size")+
geom_line(aes(x = trials, y = power, color = parameter), size = 1) +
scale_y_continuous(limits = c(0, 1), breaks = seq(0, 1, 0.2)) +
scale_x_continuous(breaks = seq(72, 396, 36))
joined <- do.call(rbind, designpower)
filtered <- dplyr::filter(joined, type == "effect.power")
ggplot(filtered) + ggtitle("Power vs. Sample Size")+
theme(text = element_text(size = 16))+
labs(title = "COI 1 - Op 1")+
labs(subtitle = "Power vs. Sample Size")+
geom_line(aes(x = trials, y = power, color = parameter), size = 1, position = position_dodge(width = 0.2)) +
scale_y_continuous(limits = c(0, 1), breaks = seq(0, 1, 0.2)) +
scale_x_continuous(breaks = seq(72, 396, 36))
joined <- do.call(rbind, designpower)
filtered <- dplyr::filter(joined, type == "effect.power")
ggplot(filtered) + ggtitle("Power vs. Sample Size")+
theme(text = element_text(size = 16))+
labs(title = "COI 1 - Op 1")+
labs(subtitle = "Power vs. Sample Size")+
geom_line(aes(x = trials, y = power, color = parameter), size = 1, position = position_dodge(width = 0.5)) +
scale_y_continuous(limits = c(0, 1), breaks = seq(0, 1, 0.2)) +
scale_x_continuous(breaks = seq(72, 396, 36))
joined <- do.call(rbind, designpower)
filtered <- dplyr::filter(joined, type == "effect.power")
ggplot(filtered) + ggtitle("Power vs. Sample Size")+
theme(text = element_text(size = 16))+
theme(plot.background = element_rect(color = "black", size = 1))+
labs(title = "COI 1 - Op 1")+
labs(subtitle = "Power vs. Sample Size")+
geom_line(aes(x = trials, y = power, color = parameter), size = 1, position = position_dodge(width = 0.5)) +
scale_y_continuous(limits = c(0, 1), breaks = seq(0, 1, 0.2)) +
scale_x_continuous(breaks = seq(72, 396, 36))
joined <- do.call(rbind, designpower)
filtered <- dplyr::filter(joined, type == "effect.power")
ggplot(filtered) + ggtitle("Power vs. Sample Size")+
theme(text = element_text(size = 16))+
theme(plot.background = element_rect(color = "black", size = 1))+
labs(title = "COI 1 - Op 1")+
labs(subtitle = "Power vs. Sample Size")+
geom_line(aes(x = trials, y = power, color = parameter), size = 1, position = position_dodge(width = 0.8)) +
scale_y_continuous(limits = c(0, 1), breaks = seq(0, 1, 0.2)) +
scale_x_continuous(breaks = seq(72, 396, 36))
joined <- do.call(rbind, designpower)
filtered <- dplyr::filter(joined, type == "effect.power")
ggplot(filtered) + ggtitle("Power vs. Sample Size")+
theme(text = element_text(size = 16))+
theme(plot.background = element_rect(color = "black", size = 1))+
labs(title = "COI 1 - Op 1")+
labs(subtitle = "Power vs. Sample Size")+
geom_line(aes(x = trials, y = power, color = parameter), size = .5, position = position_dodge(width = 0.8)) +
scale_y_continuous(limits = c(0, 1), breaks = seq(0, 1, 0.2)) +
scale_x_continuous(breaks = seq(72, 396, 36))
joined <- do.call(rbind, designpower)
filtered <- dplyr::filter(joined, type == "effect.power")
ggplot(filtered) + ggtitle("Power vs. Sample Size")+
theme(text = element_text(size = 16))+
theme(plot.background = element_rect(color = "black", size = 1))+
labs(title = "COI 1 - Op 1")+
labs(subtitle = "Power vs. Sample Size")+
geom_line(aes(x = trials, y = power, color = parameter), size = 2, position = position_dodge(width = 0.8)) +
scale_y_continuous(limits = c(0, 1), breaks = seq(0, 1, 0.2)) +
scale_x_continuous(breaks = seq(72, 396, 36))
joined <- do.call(rbind, designpower)
filtered <- dplyr::filter(joined, type == "effect.power")
ggplot(filtered) + ggtitle("Power vs. Sample Size")+
theme(text = element_text(size = 16))+
theme(plot.background = element_rect(color = "black", size = 1))+
labs(title = "COI 1 - Op 1")+
labs(subtitle = "Power vs. Sample Size")+
geom_line(aes(x = trials, y = power, color = parameter), size = 1.5, position = position_dodge(width = 0.8)) +
scale_y_continuous(limits = c(0, 1), breaks = seq(0, 1, 0.2)) +
scale_x_continuous(breaks = seq(72, 396, 36))
joined <- do.call(rbind, designpower)
filtered <- dplyr::filter(joined, type == "effect.power")
ggplot(filtered) + ggtitle("Power vs. Sample Size")+
theme(text = element_text(size = 16))+
theme(plot.background = element_rect(color = "black", size = 1))+
labs(title = "COI 1 - Op 1")+
labs(subtitle = "Power vs. Sample Size")+
geom_line(aes(x = trials, y = power, color = parameter), size = 1.25, position = position_dodge(width = 0.8)) +
scale_y_continuous(limits = c(0, 1), breaks = seq(0, 1, 0.2)) +
scale_x_continuous(breaks = seq(72, 396, 36))
joined <- do.call(rbind, designpower)
filtered <- dplyr::filter(joined, type == "effect.power")
ggplot(filtered) + ggtitle("Power vs. Sample Size")+
theme(text = element_text(size = 16))+
theme(plot.background = element_rect(color = "black", size = 1))+
labs(title = "COI 1 - Op 1")+
labs(subtitle = "Power vs. Sample Size")+
geom_line(aes(x = trials, y = power, color = parameter), size = 1, position = position_dodge(width = 0.8)) +
scale_y_continuous(limits = c(0, 1), breaks = seq(0, 1, 0.2)) +
scale_x_continuous(breaks = seq(72, 396, 36))
filtered
joined <- do.call(rbind, designpower)
filtered <- dplyr::filter(joined, type == "effect.power")
ggplot(filtered) + ggtitle("Power vs. Sample Size")+
theme(text = element_text(size = 16))+
theme(plot.background = element_rect(color = "black", size = 1))+
labs(title = "COI 1 - Op 1")+
labs(subtitle = "Power vs. Sample Size")+
geom_line(aes(x = trials, y = power, color = parameter), size = 1, position = position_dodge(width = 1)) +
scale_y_continuous(limits = c(0, 1), breaks = seq(0, 1, 0.2)) +
scale_x_continuous(breaks = seq(72, 396, 36))
joined <- do.call(rbind, designpower)
filtered <- dplyr::filter(joined, type == "effect.power")
ggplot(filtered) + ggtitle("Power vs. Sample Size")+
theme(text = element_text(size = 16))+
theme(plot.background = element_rect(color = "black", size = 1))+
labs(title = "COI 1 - Op 1")+
labs(subtitle = "Power vs. Sample Size")+
geom_line(aes(x = trials, y = power, color = parameter), size = 1, position = position_dodge(width = 50)) +
scale_y_continuous(limits = c(0, 1), breaks = seq(0, 1, 0.2)) +
scale_x_continuous(breaks = seq(72, 396, 36))
end_design = gen_design(candidateset = factorial, model = ~ (Rx_Type + Weather + Battery_Life)^2, trials = 216)
eval_design(design = end_design, alpha = 0.2, effectsize = 0.7143, detailedoutput = TRUE, conservative = TRUE)
display(end_design)
end_design
factorial2 = expand.grid(Rx_Type = as.factor(c("Handheld", "Airborne", "Fixed_Site")), Weather = as.factor(c("Clear", "Cloudy", "Precipitation", "Snow")), Battery_Life = c(80, 100), Altitude = as.factor(c("High", "Medium", "Low")))
set.seed(4)
factorial2 = expand.grid(Rx_Type = as.factor(c("Handheld", "Airborne", "Fixed_Site")), Weather = as.factor(c("Clear", "Cloudy", "Precipitation", "Snow")), Battery_Life = c(80, 100), Altitude = as.factor(c("High", "Medium", "Low")))
factorial2 = subset(factorial2,
!(Rx_Type %in% c("Handheld") & Altitude %in% c("High")) &
!(Rx_Type %in% c("Airborne") & Weather %in% c("Snow")))
factorial2
d_optdesign = gen_design(candidateset = factorial2, model = ~ Rx_Type + Weather + Battery_Life + Altitude + Rx_Type:Battery_Life + Weather:Battery_Life + Weather:Altitude + Battery_Life:Altitude, trials = 24, optimality = "D", parallel  = TRUE)
install.packages("Rtools")
install.packages("skpr")
install.packages("mbest")
install.packages("ggplot2")
install.packages("pwr")
install.packages("tidyverse")
install.packages("readr")
library(skpr)
library(mbest)
library(ggplot2)
library(pwr)
library(tidyverse)
library(readr)
remotes::install_github("tylermorganwall/skpr@effect_custom")
set.seed(4)
factorial2 = expand.grid(Rx_Type = as.factor(c("Handheld", "Airborne", "Fixed_Site")), Weather = as.factor(c("Clear", "Cloudy", "Precipitation", "Snow")), Battery_Life = c(80, 100), Altitude = as.factor(c("High", "Medium", "Low")))
factorial2 = subset(factorial2,
!(Rx_Type %in% c("Handheld") & Altitude %in% c("High")) &
!(Rx_Type %in% c("Airborne") & Weather %in% c("Snow")))
factorial2
d_optdesign = gen_design(candidateset = factorial2, model = ~ Rx_Type + Weather + Battery_Life + Altitude + Rx_Type:Battery_Life + Weather:Battery_Life + Weather:Altitude + Battery_Life:Altitude, trials = 24, optimality = "D", parallel  = TRUE)
install.packages("installr")
library(installr)
updateR()
